use bytes::BytesMut;

use crate::esx::*;

const SAMPLE: [u8; 0x28B] = [
  0x54, 0x45, 0x53, 0x34, // 'TES4' as bytes
  0x4B, 0x00, 0x00, 0x00, // Data field size in bytes (75)
  0x00, 0x00, 0x00, 0x00, // Flags
  0x00, 0x00, 0x00, 0x00, // Form ID
  0x00, 0x00, // Timestamp
  0x00, 0x00, // VCS
  0x83, 0x00, // Internal version
  0x00, 0x00, // Unknown
  0x48, 0x45, 0x44, 0x52, 0x0C, 0x00, 0x33, 0x33, 0x73, 0x3F, 0x04, 0x00, 0x00, 0x00, 0x9D, 0x0F,
  0x00, 0x00, 0x43, 0x4E, 0x41, 0x4D, 0x08, 0x00, 0x6F, 0x75, 0x73, 0x6E, 0x69, 0x75, 0x73, 0x00,
  0x4D, 0x41, 0x53, 0x54, 0x0D, 0x00, 0x46, 0x61, 0x6C, 0x6C, 0x6F, 0x75, 0x74, 0x34, 0x2E, 0x65,
  0x73, 0x6D, 0x00, 0x44, 0x41, 0x54, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x49, 0x4E, 0x54, 0x56, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, // TES4 Data
  0x47, 0x52, 0x55, 0x50, // GRUP
  0x09, 0x01, 0x00, 0x00, // Size
  0x54, 0x58, 0x53, 0x54, // Label
  0x00, 0x00, 0x00, 0x00, // Type
  0xA2, 0x20, // Timestamp
  0x00, 0x00, // VCS
  0x00, 0x00, 0x00, 0x00, // Unknown
  0x54, 0x58, 0x53, 0x54, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9B, 0x0F, 0x00, 0x01,
  0xA2, 0x20, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x45, 0x44, 0x49, 0x44, 0x11, 0x00, 0x53, 0x6B,
  0x69, 0x6E, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x72, 0x43, 0x42, 0x42, 0x45, 0x00, 0x4F,
  0x42, 0x4E, 0x44, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x54, 0x58, 0x30, 0x30, 0x32, 0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x5C, 0x43, 0x68,
  0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5C, 0x62, 0x61, 0x73, 0x65, 0x68, 0x75, 0x6D, 0x61,
  0x6E, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x5C, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x62, 0x68,
  0x65, 0x64, 0x5F, 0x64, 0x2E, 0x64, 0x64, 0x73, 0x00, 0x54, 0x58, 0x30, 0x31, 0x32, 0x00, 0x41,
  0x63, 0x74, 0x6F, 0x72, 0x73, 0x5C, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5C,
  0x62, 0x61, 0x73, 0x65, 0x68, 0x75, 0x6D, 0x61, 0x6E, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x5C,
  0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x62, 0x68, 0x65, 0x64, 0x5F, 0x6E, 0x2E, 0x64, 0x64, 0x73,
  0x00, 0x54, 0x58, 0x30, 0x37, 0x32, 0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x5C, 0x43, 0x68,
  0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5C, 0x62, 0x61, 0x73, 0x65, 0x68, 0x75, 0x6D, 0x61,
  0x6E, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x5C, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x62, 0x68,
  0x65, 0x64, 0x5F, 0x73, 0x2E, 0x64, 0x64, 0x73, 0x00, 0x44, 0x4E, 0x41, 0x4D, 0x02, 0x00, 0x02,
  0x00, // GRUP data
  0x47, 0x52, 0x55, 0x50, // GRUP
  0x1F, 0x01, 0x00, 0x00, // Size
  0x48, 0x44, 0x50, 0x54, // Label
  0x00, 0x00, 0x00, 0x00, // Type
  0xA2, 0x20, // Timestamp
  0x00, 0x00, // VCS
  0x00, 0x00, 0x00, 0x00, // Unknown
  0x48, 0x44, 0x50, 0x54, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0xD0, 0x04, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x45, 0x44, 0x49, 0x44, 0x18, 0x00, 0x46, 0x65,
  0x6D, 0x61, 0x6C, 0x65, 0x48, 0x65, 0x61, 0x64, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x52, 0x65, 0x61,
  0x72, 0x54, 0x45, 0x4D, 0x50, 0x00, 0x46, 0x55, 0x4C, 0x4C, 0x18, 0x00, 0x46, 0x65, 0x6D, 0x61,
  0x6C, 0x65, 0x48, 0x65, 0x61, 0x64, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x52, 0x65, 0x61, 0x72, 0x54,
  0x45, 0x4D, 0x50, 0x00, 0x4D, 0x4F, 0x44, 0x4C, 0x3E, 0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73,
  0x5C, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5C, 0x43, 0x68, 0x61, 0x72, 0x61,
  0x63, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5C, 0x46, 0x61, 0x63, 0x65, 0x50,
  0x61, 0x72, 0x74, 0x73, 0x5C, 0x46, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x68, 0x65, 0x61, 0x64, 0x52,
  0x65, 0x61, 0x72, 0x2E, 0x6E, 0x69, 0x66, 0x00, 0x4D, 0x4F, 0x44, 0x54, 0x44, 0x00, 0x04, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x58, 0x23, 0x32, 0x92, 0x64, 0x64, 0x73, 0x00, 0xF2, 0x92, 0xD0, 0xCB, 0x81, 0x4F,
  0x34, 0xF1, 0x64, 0x64, 0x73, 0x00, 0xF2, 0x92, 0xD0, 0xCB, 0x9F, 0xA6, 0xE1, 0x11, 0x64, 0x64,
  0x73, 0x00, 0xF2, 0x92, 0xD0, 0xCB, 0xD6, 0x96, 0x9D, 0xD9, 0x62, 0x67, 0x73, 0x6D, 0xBE, 0xE8,
  0x99, 0x51, 0x44, 0x41, 0x54, 0x41, 0x01, 0x00, 0x15, 0x50, 0x4E, 0x41, 0x4D, 0x04, 0x00, 0x09,
  0x00, 0x00, 0x00, 0x54, 0x4E, 0x41, 0x4D, 0x04, 0x00, 0x9B, 0x0F, 0x00, 0x01, 0x52, 0x4E, 0x41,
  0x4D, 0x04, 0x00, 0xDF, 0x25, 0x11, 0x00, // GRUP data
];

#[test]
fn esx_from_buffer() {
  let buf: BytesMut = BytesMut::from(SAMPLE.as_slice());

  let esx = ESx::from_bytes(&mut buf.clone()).unwrap();
  println!("ESx Test: {:#?}", esx);
  let bytes = esx.as_bytes();
  println!("Bytes: {:?}", bytes);
  assert_eq!(bytes, buf);
}
